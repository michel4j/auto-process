#!/usr/bin/env python

import argparse
from argparse import RawDescriptionHelpFormatter

from autoprocess import auto_process as command_step

EXAMPLES = """
Data sets:
    Each data set can be represented by any frame from that set.
    If multiple frames are provided but no MAD modifier options (-m, --mad) is provided, 
    each set will be processed, and at the end all the datasets will be scaled together 
    and merge into a single output reflection file.

Examples:
    auto.process --mad /path/to/dataset_{peak,infl,remo}_001.img
        process a 3-dataset MAD  
        
    auto.process /path/to/dataset_{hires,lores}_001.img
        process and merge low-resolution and hi-resolution datasets

    auto.process /path/to/dataset_hires_001.img /path/to/dataset_lores_001.img
        process and merge low-resolution and hi-resolution datasets. Same as above.
        
    auto.process --screen /foo/bar/test_001.img --dir /foo/screen_output
        Screen dataset and place the output in the given directory
"""

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description='Automatically Process a dataset',
        epilog=EXAMPLES,
        formatter_class=RawDescriptionHelpFormatter
    )
    parser.add_argument(
        'images', nargs='*',
        help=(
            'Data sets to process. Each data set can be represented '
            'by any frame from that set. If no datasets are provided, attempt '
            'to resume from a previous checkpoint file'
        )
    )
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-m', '--mad', help='Process each set, scale together and generate separate outputs.', action="store_true")
    group.add_argument('-s', '--screen', help='Process a few frames to characterize crystal', action="store_true")
    parser.add_argument('-a', '--anom', help="Process with Friedel's law False", action="store_true")
    parser.add_argument('-b', '--backup', help="Backup existing directory", action="store_true")
    parser.add_argument('-p', '--prefix', help="comma separated list of prefixes to use for output files", type=str)
    parser.add_argument('-d', '--dir', help="Directory to store output files. If not provided a new one is created", type=str)

    parser.add_argument('-z', '--zap', help="Abandon saved state and start all over. Must be in a results directory.", action="store_true")
    parser.add_argument('-l', '--load', help="Load manually processed dataset", action="store_true")
    parser.add_argument('-x', '--nonchiral', help="Non-chiral spacegroups. Default assumes only chiral molecules", action="store_true")
    group.add_argument('--formula', help="Solve small molecule with provided formula. Eg Mg1O6H12", type=str)

    args = parser.parse_args()
    command_step.run(args)
